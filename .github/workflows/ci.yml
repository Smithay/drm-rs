name: Rust
on:
  push:
    branches:
      - master
      - develop
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:

jobs:
  format:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          default: true
          override: true
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.toml') }}
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  doc:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rust-docs
          default: true
          override: true
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_nightly-${{ hashFiles('**/Cargo.toml') }}
      - name: Documentation
        uses: actions-rs/cargo@v1
        env:
          DOCS_RS: 1
        with:
          command: doc

  check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y libdrm-dev
      - name: Update deps
        uses: actions-rs/cargo@v1
        with:
          command: update
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.65.0
          profile: minimal
          components: clippy
          default: true
          override: true
      - name: Downgrade home
        run: cargo update -p home --precise 0.5.5
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_1.65.0-${{ hashFiles('**/Cargo.toml') }}
      - name: Build cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-build-rust_1.65.0-check-${{ hashFiles('**/Cargo.toml') }}
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all --all-features --all-targets -- -D warnings -A clippy::redundant_static_lifetimes

  check-minimal:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y libdrm-dev
      - name: Update deps
        uses: actions-rs/cargo@v1
        with:
          command: update
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          default: true
          override: true
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_nightly-${{ hashFiles('**/Cargo.toml') }}
      - name: Build cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-build-rust_nightly-check-minimal-${{ hashFiles('**/Cargo.toml') }}
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --all-features --all-targets -Z minimal-versions

  test:
    needs:
      - format
      - doc
      - check
    strategy:
      fail-fast: ${{ startsWith(github.ref, 'refs/tags/') }}
      matrix:
        include:
          # Generate bindings
          - task: bindings
            os: ubuntu-22.04
            rust: stable
            target: i686-unknown-linux-gnu
          - task: bindings
            os: ubuntu-22.04
            rust: stable
            target: x86_64-unknown-linux-gnu
          - task: bindings
            os: ubuntu-22.04
            rust: stable
            target: arm-unknown-linux-gnueabihf
          - task: bindings
            os: ubuntu-22.04
            rust: stable
            target: armv7-unknown-linux-gnueabihf
          - task: bindings
            os: ubuntu-22.04
            rust: stable
            target: aarch64-unknown-linux-gnu
          - task: bindings
            os: ubuntu-22.04
            rust: stable
            target: riscv64gc-unknown-linux-gnu
          # Test channels
          - task: channels
            os: ubuntu-22.04
            rust: stable
            target: x86_64-unknown-linux-gnu
          - task: channels
            os: ubuntu-22.04
            rust: beta
            target: x86_64-unknown-linux-gnu
          - task: channels
            os: ubuntu-22.04
            rust: nightly
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup linux cross toolchain
        if: contains(matrix.target, '-linux-') && !startsWith(matrix.target, 'x86_64-')
        run: |
          GCC_TARGET=$(printf "${{ matrix.target }}" | sed 's/-unknown-/-/;s/arm[^-]*/arm/;s/riscv[^-]*/riscv64/')
          ENV_TARGET=$(printf "${{ matrix.target }}" | tr '-' '_'  | tr '[[:lower:]]' '[[:upper:]]')
          sudo apt-get update -y
          sudo apt-get install -y gcc-${GCC_TARGET}
          echo "CARGO_TARGET_${ENV_TARGET}_LINKER=${GCC_TARGET}-gcc" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=/usr/${GCC_TARGET}" >> $GITHUB_ENV
      - name: Fetch drm headers
        run: |
          mkdir drm
          wget -O drm/drm.h https://github.com/torvalds/linux/raw/master/include/uapi/drm/drm.h
          wget -O drm/drm_mode.h https://github.com/torvalds/linux/raw/master/include/uapi/drm/drm_mode.h
          echo "LIBDRM_INCLUDE_PATH=${PWD}/drm" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-D __user= ${BINDGEN_EXTRA_CLANG_ARGS}" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          components: rustfmt
          default: true
          override: true
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-rust_${{ matrix.rust }}-${{ hashFiles('**/Cargo.toml') }}
      - name: Build cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-build-rust_${{ matrix.rust }}-target_${{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}
      - name: Update deps
        uses: actions-rs/cargo@v1
        with:
          command: update
      - name: Build sys
        uses: actions-rs/cargo@v1
        env:
          RUST_LOG: bindgen=warn,bindgen::ir=error,bindgen::codegen=error
        with:
          command: build
          args: --manifest-path drm-ffi/drm-sys/Cargo.toml --target ${{ matrix.target }} --features update_bindings
      - name: Copy bindings
        run: cp drm-ffi/drm-sys/src/bindings.rs bindings-${{ matrix.target }}.rs
      - name: Upload bindings
        if: matrix.task == 'bindings'
        uses: actions/upload-artifact@v3
        with:
          name: bindings
          path: bindings-*.rs
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }}
      - name: Test
        if: contains(matrix.target, '-linux-') && (startsWith(matrix.target, 'x86_64-') || startsWith(matrix.target, 'i686-'))
        uses: actions-rs/cargo@v1
        timeout-minutes: 12
        env:
          RUST_BACKTRACE: full
        with:
          command: test
          args: --all --target ${{ matrix.target }}

  compare-bindings:
    needs:
      - test
    runs-on: ubuntu-22.04
    steps:
      - name: download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings
      - name: compare
        run: |
          code=0
          for i in bindings-*.rs
          do
            if cmp -s bindings-x86_64-unknown-linux-gnu.rs ${i}
            then
              echo ${i} matches x86_64 bindings
            else
              echo ${i} does not match x86_64 bindings
              diff bindings-x86_64-unknown-linux-gnu.rs ${i}
              code=1
            fi
          done
          exit ${code}

  update-bindings:
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') }}
    needs:
      - compare-bindings
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings
      - name: Copy x86_64 bindings
        run: |
          cp bindings-x86_64-unknown-linux-gnu.rs drm-ffi/drm-sys/src/bindings.rs
          rm bindings-*.rs
      - name: Create pull request
        uses: peter-evans/create-pull-request@v3
        with:
          base: ${{ github.head_ref }}
          commit-message: Updated bindings
          branch: update-bindings
          delete-branch: true
          title: Update bindings
          body: |
            Bindings should be updated to be consistent with latest changes

  publish:
    if: github.repository == 'Smithay/drm-rs' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - format
      - doc
      - check
      - check-minimal
      - test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Publish crates
        uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CRATES_TOKEN }}
          args: --no-verify
          #dry-run: true
